Sprint1)
studio oggetti 3D e loro trasformazioni
studio della camera di vista
studio dei colori
studio della luce globale

Sprint2)
studio oggetti 3D esterni, caricamento da file
studio ombre
creazione dei file (si appoggiano su webgl-utils, glm-light, m4, primitives, subdiv, mesh_utils){
Obj3D
WebGLController
utility
Panel2D
}
estenzione della libreria{
glm-light per poter catturare le normali alle superfici
693 mesh.model=model; //MODIFICA SULLE LIBRERIE DEL PROF
}

Sprint3)
fix delle normali lette dal file obj

Sprint4)
fix textcord per le texture

Sprint5)
ruote
car
(riscritto dal codice di car2.js ed cg_car2.html)
rispetto alla logica attuale dei vari OBJ e di un gestore unico che attualmente fa le draw ottenendo i valori dagli obj
ho dovuto ripensare il meccanismo spostando l'azione di draw direttamente all'interno dei singoli obj, dato che in alcuni casi
devono eseguire delle operazioni sulla matrice mMatrix prima della loro draw, quindi il componente che gestisce le draw chiederà ai singoli obj
di fare a loro volta la draw invece che chiederne i dati per poi eseguirla lui stesso.
In quesot modo posso anche gestire meglio eventuali "conglomerati" di oggetti, come l'auto, che a sua volta può contenere obj e quindi scatenare una draw in cascata

//-------------
aggiunto "texture_enable" allo shader e alle Uniform degli oggetti per gestire il caso in cui un obj sia sprovvisto della texture

//contatore fps


Sprint6)
obre migliorate
-----
cercando di applicare un blur sulle obre, ho aggiunto anche un fattore di illuminazione
"illuminazione" che in sostanza manipola il valore rgb applicato alle ombre, calando un obra generale su tutti i px della scena (omogenea)

//--------primo tentativo
una funzione che permetta di effettuare una sorta di blur sulle ombre, aumentado la luce ombra intorno ai punti di confine
(l'effetto è solo quello di un ombra più grande, si raffina l'obra solo per punti lontai dalla fonte della luce):
 //blur manuale delle ombre
            //if(shadowLight>0.0){
            //    //se il punto attuale non è un pezzo dell'ombra, aumento comunque la sua ombra in base alla distanza da altri px in ombra
            //    float intensita = 0.0;
            //    for(float x=0.0 ; x<0.001; x += 0.01){
            //        for(float y=0.0; y<0.001; y += 0.01){
            //            if((projectedTexcoord.x + x) < 1.0 && (projectedTexcoord.y + y) < 1.0){                            
            //                vec4 temp_coord=vec4(projectedTexcoord.x+x,projectedTexcoord.y+y,projectedTexcoord.z,1.0);
            //                float projectedDepth_2=texture2D(u_projectedTexture, temp_coord.xy).r;
            //                intensita += (inRange && projectedDepth_2 <= currentDepth) ? 1.0 : 0.001;
            //            }
            //        }
            //    }
            //    shadowLight=shadowLight-intensita;
            //}
Sprint7)
aggiungere luci auto (luce proiettata dai fari davanti)
webgl-3d-lighting-point-color
(non sono riuscito in tempi ragionevi ad aggiungere le ombre cusate dalle luci davanti dell'auto)
Sprint()
aggiungere luci auto davanti e dietro come materiali luminescenti            
